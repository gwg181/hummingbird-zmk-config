/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/* Layers */
#define DEF_L 0
#define NAV_L 1
#define UPP_L 2
#define SYM_L 3
#define NUM_L 4

/* Behavior Settings */
&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&sk {
  release-after-ms = <60000>;
};

/ {
    ZMK_MACRO(mo_nav,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo NAV_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo NAV_L>;)

    ZMK_MACRO(mo_upp,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo UPP_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo UPP_L>;)
    ZMK_MACRO(leq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LT &kp EQUAL>;)

    ZMK_MACRO(eq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EQUAL &kp EQUAL>;)

    ZMK_MACRO(geq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp GT &kp EQUAL>;)

    ZMK_MACRO(neq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EXCL &kp EQUAL>;)

    ZMK_MACRO(arrow,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp MINUS &kp GT>;)

    ZMK_MACRO(hop,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp SPACE &kp H &kp LS(C)>;)

    ZMK_MACRO(mo_sym,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo SYM_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo SYM_L>;)

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
          combo_##NAME { \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │     0   1   2   3  │ │  4   5   6   7     │
          │ 8   9   10  11  12 │ │ 13  14  15  16  17 │
          │ 18  19  20  21     │ │     22  23  24  25 │
          ╰───────────╮ 26  27 │ │ 28  29 ╭───────────╯
                      ╰────────╯ ╰────────╯            */

         /* Letters */
        COMBO(lower_q, &kp Q, 19 20, DEF_L)
        COMBO(lower_q, &kp LS(Q), 19 20, UPP_L)

        COMBO(lower_z, &kp Z, 20 21, DEF_L)
        COMBO(upper_z, &kp LS(Z), 20 21, UPP_L)

        COMBO(lower_j, &kp J, 22 23, DEF_L)
        COMBO(upper_j, &kp LS(J), 22 23, UPP_L)

        COMBO(forward_slash, &kp FLSH, 23 24, DEF_L)
        COMBO(question_mark, &kp LS(FLSH), 23 24, UPP_L)

        /* Brackets */
        COMBO(left_bracket, &kp LBKT, 0 9, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_bracket, &kp RBKT, 7 16, DEF_L UPP_L SYM_L NUM_L)
        COMBO(left_parenthesis, &kp LPAR, 1 10, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_parenthesis, &kp RPAR, 6 15, DEF_L UPP_L SYM_L NUM_L)
        COMBO(left_brace, &kp LBRC, 2 11, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_brace, &kp RBRC, 5 14, DEF_L UPP_L SYM_L NUM_L)

        /* Convenience */
        COMBO(esc, &kp ESC, 1 2, DEF_L)
        COMBO(ent, &kp ENTER, 15 16, DEF_L)
        COMBO(del, &kp DEL, 4 5, DEF_L)
        COMBO(tab, &kp TAB, 9 10, DEF_L)
        COMBO(select_all, &kp LC(A), 19 20, NAV_L)


        COMBO(geq, &geq, 0 2, DEF_L)
        COMBO(leq, &leq, 19 21, DEF_L)
        COMBO(eq, &eq, 9 11, DEF_L)
        COMBO(arrow, &arrow, 14 16, DEF_L)
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <UPP_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &kp L         &kp Y         &kp P         &kp B             &kp X         &kp F         &kp O         &kp U
             &kp C         &kp R         &kp S         &kp T         &kp G             &kp M         &kp N         &kp E         &kp I         &kp A
             &kp W         &kp K         &kp V         &kp D                                         &kp H         &kp SQT       &kp COMMA     &kp DOT
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &mo_nav       &kp SPACE         &mo_upp       &mo_sym
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯

            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &kp N0        &hop          &kp DLLR      &none             &kp PG_UP     &kp HOME      &none         &kp END
             &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     &kp LC(Z)         &kp PG_DN     &kp LARW      &kp DARW      &kp UARW      &kp RARW
             &bt BT_NXT    &kp LC(X)     &kp LC(C)     &kp LC(V)                                     &kp TAB       &kp LS(TAB)   &key_repeat   &caps_word
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &trans        &trans            &kp BSPC      &kp DEL
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        upper_layer {
            label = "Upp";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &kp LS(L)     &kp LS(Y)     &kp LS(P)     &kp LS(B)         &kp LS(X)     &kp LS(F)     &kp LS(O)     &kp LS(U)
             &kp LS(C)     &kp LS(R)     &kp LS(S)     &kp LS(T)     &kp LS(G)         &kp LS(M)     &kp LS(N)     &kp LS(E)     &kp LS(I)     &kp LS(A)
             &kp LS(W)     &kp LS(K)     &kp LS(V)     &kp LS(D)                                     &kp LS(H)     &kp LS(SQT)   &kp LS(COMMA) &kp LS(DOT)
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &trans        &kp LS(SPACE)     &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &kp AMPS      &kp ASTRK     &kp BSLH      &kp PLUS          &none         &none         &none         &none
             &kp COLON     &kp DLLR      &kp PRCNT     &kp CARET     &kp EQUAL         &none         &sk LSHFT     &sk LCTRL     &sk LALT      &sk LGUI
             &kp SEMI      &kp EXCL      &kp AT        &kp POUND                                     &kp LT        &kp PIPE      &kp GT        &none
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &kp MINUS     &kp UNDER         &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                           &kp N7        &kp N4        &kp N3        &kp PLUS             &kp K         &kp W         &kp B         &kp G
             &kp GRAVE     &kp N2        &kp N1        &kp N0        &kp EQUAL            &kp J         &sk LSHFT     &sk LCTRL     &sk LALT      &sk LGUI
             &none         &kp N8        &kp N6        &kp N5                                           &kp D         &none         &none         &kp Y
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &kp N9        &kp MINUS         &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────
            >;
        };
    };
};
